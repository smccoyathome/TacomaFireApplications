using System;
using System.Globalization;
using System.IO;
using System.Web.Mvc;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using UpgradeHelpers.Interfaces;
using UpgradeHelpers.WebMap.Server;
using IViewModel = UpgradeHelpers.Interfaces.IViewModel;
using System.Reflection;


/// <summary>
/// This value provider is used to analyze the JSON Request to populate the controller arguments.
/// The value provider will check the response to have the WM header and it will assume
/// this response to have the form
/// {
///   vm: "viewmodeluniqueid",dirty:{},closedViews:[], parameters: { param1: {}, param2: {} }
/// }
/// </summary>
public class JSONAjaxValueProvider : ValueProviderFactory
{
    private static JsonValueProviderFactory _oldFactory = new JsonValueProviderFactory();

    public override IValueProvider GetValueProvider(ControllerContext controllerContext)
    {
        return ProcessWebMapAction(controllerContext.Controller);
    }

    internal IValueProvider ProcessWebMapAction(ControllerBase controller)
    {
        return new WebMapAction(controller);
    }


    /// <summary>
    /// Value provider implementation to populate controller arguments from WebMap sendAction json requests
    /// </summary>
    internal class WebMapAction : IValueProvider
    {
        /// <summary>
        /// This key is generated by the WebMap migration tool
        /// as the key on controller actions that will identify the form's viewmodel parameter
        /// </summary>
        internal const string VIEWFROMCLIENT = "viewFromClient";

        /// <summary>
        /// This key is also an alias for "viewFromClient". It has the same efect of 
        /// mapping the argument with the form's viewmodel parameters
        /// </summary>
        internal const string VIEWMODEL = "viewmodel";


        /// <summary>
        /// This key is generated by the WebMap migration tool to map the argument with the 
        /// usercontrol viewmodel
        /// </summary>
        internal const string USERCONTROL = "usercontrol";

        private readonly ControllerBase _controller;

        public WebMapAction(ControllerBase controller)
        {
            //this.jobj = jobj;
            _controller = controller;
        }

        public bool ContainsPrefix(string prefix)
        {
            if (VIEWMODEL.Equals(prefix, StringComparison.CurrentCultureIgnoreCase) ||
                VIEWFROMCLIENT.Equals(prefix, StringComparison.CurrentCultureIgnoreCase) ||
                USERCONTROL.Equals(prefix, StringComparison.CurrentCultureIgnoreCase) ||
				"eventsender".Equals(prefix, StringComparison.CurrentCultureIgnoreCase) ||
				"objectForId".Equals(prefix, StringComparison.CurrentCultureIgnoreCase))		
            {
                return true;
            }
            var jobj = StateManager.Current.lastRequestFromClient;
            if (jobj!=null && jobj[prefix] != null)
            {
                return true;
            }
            if (prefix == "dialogResult")
            {
                return true;
            }
            return false;
        }
        public ValueProviderResult GetValue(string key)
        {
            if (VIEWMODEL.Equals(key, StringComparison.CurrentCultureIgnoreCase) ||
                VIEWFROMCLIENT.Equals(key, StringComparison.CurrentCultureIgnoreCase) ||
                USERCONTROL.Equals(key, StringComparison.CurrentCultureIgnoreCase))
            {
                JToken tok = StateManager.Current.lastRequestFromClient["vm"];
                string vmID = tok != null ? tok.Value<string>() : null;
                if (vmID != null)
                {
                    var actualObject = StateManager.Current.GetObject(vmID);
                    // lets update the container of controller logic with view model context
                    UpdateContainerWithViewModel(actualObject);

                    return new ValueProviderResult(actualObject, "json", CultureInfo.CurrentCulture);
                }
                return null;
            }
            if ("eventsender".Equals(key) || ("objectForId".Equals(key)))
            {
                JToken tok = StateManager.Current.lastRequestFromClient[key];
                string eventSenderID = tok != null ? tok.Value<string>() : null;
				if (eventSenderID != null)
				{
					var actualObject = StateManager.Current.GetObject(eventSenderID);
					// lets update the container of controller logic with view model context
					return new ValueProviderResult(actualObject, "json", CultureInfo.CurrentCulture);
				}
				return null;
			}


            var jobj = StateManager.Current.lastRequestFromClient;
            if (jobj != null)
            {
                if (key == "dialogResult" && jobj["dialogResult"] != null)
                {
                    var tok = jobj["dialogResult"];
                    return new ValueProviderResult(tok.Value<string>(), tok.Value<string>(), CultureInfo.CurrentCulture);
                }
                else
                {
                    //look into params
                    JToken param = jobj[key];

                    if (param != null)
                    {
                        //If the parameter is something like parameter1: { UniqueID: "someuniqueID" } 
                        //then recover from Storage and populate value on argument parameter1
                        if (param.Type == JTokenType.Object && 
                            param.First.Type == JTokenType.Property && 
                            ((JProperty)param.First).Name == "UniqueID")
                        {
                            var uniqueID = param.Value<string>("UniqueID");
                            var actualObject = StateManager.Current.GetObject(uniqueID);
                            return new ValueProviderResult(actualObject, "json", CultureInfo.CurrentCulture);
                        }
                        //If parameter is just an string then return directly
                        if (param.Type == JTokenType.String)
                        {
                            return new ValueProviderResult(param.Value<string>(), param.Value<string>(), CultureInfo.CurrentCulture);
                        }
                        else
                        {
                            var paramValue = param.ToString(Formatting.None);
                            return new ValueProviderResult(paramValue, paramValue, CultureInfo.CurrentCulture);
                        }
                    }
                }
            }
            return null;
        }

        private void UpdateContainerWithViewModel(IStateObject viewModel)
        {
            var controllerType = _controller.GetType();
            PropertyInfo logicProperty = controllerType.GetProperty("logic");
            if (logicProperty != null)
            {
                object logic = IocContainerImplWithUnity.Current.Resolve(logicProperty.PropertyType, new object[] { viewModel, });
                logicProperty.SetValue(_controller, logic, null);
            }
        }
    }
}